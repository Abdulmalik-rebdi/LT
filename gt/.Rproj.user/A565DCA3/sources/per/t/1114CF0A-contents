---
title: "gt package in R"
date: '2022-07-24'

output: 
  html_document:
    toc : true
    number_sections: true
    toc_float : true
    code_folding: show
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(comment = NA, results='hide', message = FALSE, warning = FALSE )
library(tidyverse)
library(gt)

```



```{r include=FALSE }




Titanic = read.csv('./titanic.csv')
Titanic = sample_n(Titanic, 15)  
  

```

# introduction 

gt is used to let anyone who wants to present a table to present it nicely 
it let you add title , subtitle , labels to columns , row grouping and color the table as you wish 

# the probelm 
if you want to present a table in R this the best you can do 
```{r results='markup'}
   Titanic %>% 
  select(gender,age,name,sibsp,parch,ticket,fare)
    


```

but with the gt package there much more you can do

# gt()

the fist method to this method is gt() gt let you just presnt it with no addition to the table 
we can see here how it look 
```{r results='markup'}
Titanic %>% 
  gt() 
    
  
```
we notice that there is a slight difference but we're can't yet say **beautiful** table

# tab header

## title

more to that we can easily write a title 
```{r results='markup'}
Titanic %>% 
  gt() %>% 
  tab_header(
    title = "Titanic" )

    
  
```
we can see the title shown in the top of the table 

## subtitle

we can put below the title a subtitle to make our table more informative 

```{r results='markup'}
Titanic %>% 
  gt() %>% 
  tab_header(
    title = "Titanic ",
    subtitle =" British luxury passenger liner that sank on April 14–15, 1912"
    
  )
```
## md  

md()  let you format the text as markdiwn such as making a word bold or inserting breakline as shown 

```{r results='markup'}
Titanic %>% 
  gt() %>% 
  tab_header(
    title = md("Titanic <br> <br/> "),
    subtitle =md(" **British** luxury passenger liner that sank on April 14–15, 1912")
    
  )
```
## grouping
if we care about a column and want to present it as main information we can use  groupname_col 
such as in this example care about the class of passenger and want to look exactly the affect of the class 

```{r results='markup' }

Titanic %>% 
  gt( groupname_col ='pclass'	 ) %>% 
  tab_header(
    title = md("Titanic"),
    subtitle =md(" British luxury passenger liner that sank on April 14–15, 1912")  
    
  )
```

## row name column
same as the column we can make the same thing to rows if we car about column that will add important insight to our presentation for example the gender 

```{r results='markup'}

Titanic %>% 
  gt(rowname_col = 'gender' , groupname_col ='pclass'	 ) %>% 
  tab_header(
    title = md("Titanic"),
    subtitle =md(" British luxury passenger liner that sank on April 14–15, 1912")  
    
  )
```
it will show it in the begging  and will add a separation line after it 

but it doesn't fit right we can change the group column to make it inline with the rowname by introducing `tap_options()`
```{r results='markup'}
Titanic %>% 
  gt(rowname_col = 'gender' , groupname_col ='pclass'	 ) %>% 
  tab_header(
    title = md("Titanic"),
    subtitle =md(" British luxury passenger liner that sank on April 14–15, 1912")  
    
  ) %>% tab_options(row_group.as_column = TRUE)
```
now it fit without the extra space



# fmt
format will make custom formatting to a column there are many formatting such as


## formating currncy

if you see the `fare` column you can notice that there are  no currency added to it we can esily added by using the fmt_currency()
```{r results='markup'}
Titanic %>% 
  gt(rowname_col = 'gender' , groupname_col ='pclass'	 ) %>% 
  tab_header(
    title = md("Titanic"),
    subtitle =md(" British luxury passenger liner that sank on April 14–15, 1912")  
    
  ) %>% tab_options(row_group.as_column = TRUE) %>% 
  fmt_currency(columns = fare , currency = 'pound' ) ## i don't know in what currency it is so i assumed it is in pound 


```
you notice that not only it added the curnccy it also change the formate to two decimal places we can change it or remove the decimal places by adding `fmt_currency(columns = fare , currency = 'pound' , decimals	= 0)` this will make the decimal places zero 

notice: the default paramter for the decimals is 2   as shown in the table

## nulls

it wont be good to present your presentation with NA written in your table fmt_missing() will provide a better approach and convert NA to dashs

```{r results='markup'}
Titanic %>% 
  gt(rowname_col = 'gender' , groupname_col ='pclass'	 ) %>% 
  tab_header(
    title = md("Titanic"),
    subtitle =md(" British luxury passenger liner that sank on April 14–15, 1912")  
    
  )%>% tab_options(row_group.as_column = TRUE) %>% 
  fmt_currency(columns = fare ,currency = "pound") %>% 
  fmt_missing(columns = everything()) ##everything will take all the columns

```


## date

fmt_date()  will let you format the date you have to any other type unfourtintly our data doesn't have any date but, 

if the input date is 2000-02-29 you can choose any of the type here 
it will convert to any of these 14 format 

1-iso: 2000-02-29

2-wday_month_day_year: Tuesday, February 29, 2000

3-wd_m_day_year: Tue, Feb 29, 2000

4- wday_day_month_year: Tuesday 29 February 2000

5- month_day_year: February 29, 2000

6- m_day_year: Feb 29, 2000

7- day_m_year: 29 Feb 2000

8- day_month_year: 29 February 2000

9- day_month: 29 February

10 - year: 2000

11- month: February

12 - day: 29

13 - year.mn.day: 2000/02/29

14 - y.mn.day: 0/02/29

example to use is it 

`fmt_date(data, columns, date_style = 2)`

notice that it must be in the ISO 8601 form of  ⁠YYYY-MM-DD HH:MM:SS⁠ or YYYY-MM-DD

# moving , hiding and grouping columns


## hiding  columns

using the function `cols_hide()` you can hide any column/s you want  

```{r results='markup' }
Titanic %>% 
  gt(rowname_col = 'gender' , groupname_col ='pclass'	 ) %>% 
  tab_header(
    title = md("Titanic"),
    subtitle =md(" British luxury passenger liner that sank on April 14–15, 1912")  
    
  )%>% tab_options(row_group.as_column = TRUE) %>% 
  fmt_currency(columns = fare ,currency = "pound") %>% 
  fmt_missing(columns = everything())%>%  ##everything will take all the columns 
    cols_hide(columns = c('ticket')) 
```

## moving columns 

the function `cols_move()` let you move any col by specifying after what columns you want to move to 
```{r results='markup'}
Titanic %>% 
  gt(rowname_col = 'gender' , groupname_col ='pclass'	 ) %>% 
  tab_header(
    title = md("Titanic"),
    subtitle =md(" British luxury passenger liner that sank on April 14–15, 1912")  
    
  )%>% tab_options(row_group.as_column = TRUE) %>% 
  fmt_currency(columns = fare ,currency = "pound") %>% 
  fmt_missing(columns = everything())%>%  ##everything will take all the columns 
    cols_hide(columns = c('ticket')) %>% 
    cols_move(
    columns = c('fare'),
    after = 'embarked' 
  )
```

## grouping 
grouping let you choose any columns and compine them into one column

```{r  results='markup'}
Titanic %>% 
  gt(rowname_col = 'gender' , groupname_col ='pclass'	 ) %>% 
  tab_header(
    title = md("Titanic"),
    subtitle =md(" British luxury passenger liner that sank on April 14–15, 1912")  
    
  )%>% tab_options(row_group.as_column = TRUE) %>% 
  fmt_currency(columns = fare ,currency = "pound") %>% 
  fmt_missing(columns = everything())%>%  ##everything will take all the columns 
    cols_hide(columns = c('ticket')) %>% 
    cols_move(
    columns = c('fare'),
    after = 'embarked' 
  )   %>% 
  cols_merge(
    columns = c(sibsp, parch),
    pattern = "{1}<br>{2}"
  ) 
  
```
## renaming columns 
we can see that they are combined into one column but now it's little misleading  since they under the name `sibsp` , cols_label will handle this by renaming any column we want 
```{r  results='markup'}
Titanic %>% 
  gt(rowname_col = 'gender' , groupname_col ='pclass'	 ) %>% 
  tab_header(
    title = md("Titanic"),
    subtitle =md(" British luxury passenger liner that sank on April 14–15, 1912")  
    
  )%>% tab_options(row_group.as_column = TRUE) %>% 
  fmt_currency(columns = fare ,currency = "pound") %>% 
  fmt_missing(columns = everything())%>%  ##everything will take all the columns 
    cols_hide(columns = c('ticket')) %>% 
    cols_move(
    columns = c('fare'),
    after = 'embarked' 
  )   %>% 
  cols_merge(
    columns = c(sibsp, parch),
    pattern = "{1}<br>{2}"
  )  %>% 
   cols_label( 
     sibsp = 'relatives'
     )
```


## labling columns
if you think the fist method is confusing then using tap_spanner is another way 
to create a label and map it to columns to make the table more informative 
so in our table there are 

```{r results='markup'}
Titanic %>% 
  gt(rowname_col = 'gender' , groupname_col ='pclass'	 ) %>% 
  tab_header(
    title = md("Titanic"),
    subtitle =md(" British luxury passenger liner that sank on April 14–15, 1912")  
    
  )%>% tab_options(row_group.as_column = TRUE) %>% 
  fmt_currency(columns = fare ,currency = "pound") %>% 
  fmt_missing(columns = everything())%>%  ##everything will take all the columns 
    cols_hide(columns = c('ticket')) %>% 
    cols_move(
    columns = c('fare'),
    after = 'embarked' 
  )   %>% 
  tab_spanner(
    label = "relatives",
    columns = c(sibsp	,parch) )%>% tab_options(row_group.as_column = TRUE) # parch are  number of parents / children aboard the Titanic
```
# coloring 
we can color our dataset to make it more informative 

 we can color any numerical  columns for example if we want color the fare depending about how cheap 
```{r  results='markup' }
Titanic %>% 
  gt(rowname_col = 'gender' , groupname_col ='pclass'	 ) %>% 
  tab_header(
    title = md("Titanic"),
    subtitle =md(" British luxury passenger liner that sank on April 14–15, 1912")  
    
  )%>% tab_options(row_group.as_column = TRUE) %>% 
  fmt_currency(columns = fare ,currency = "pound") %>% 
  fmt_missing(columns = everything())%>%  ##everything will take all the columns 
    cols_hide(columns = c('ticket')) %>% 
    cols_move(
    columns = c('fare'),
    after = 'embarked' 
  )   %>% 
  tab_spanner(
    label = "relatives",
    columns = c(sibsp	,parch) )%>% tab_options(row_group.as_column = TRUE) %>%  # parch are  number of parents / children aboard the Titanic
    data_color(
    columns = fare,
    colors = scales::col_numeric(
      palette = c("green", "red"),
      domain = c(7, 250)
    ))

```
# sourse and footnote 
with gt you can add the source and footnote in the bottom of the table 


## sourse

```{r results='markup'}
Titanic %>% 
  gt(rowname_col = 'gender' , groupname_col ='pclass'	 ) %>% 
  tab_header(
    title = md("Titanic"),
    subtitle =md(" British luxury passenger liner that sank on April 14–15, 1912")  
    
  )%>% tab_options(row_group.as_column = TRUE) %>% 
  fmt_currency(columns = fare ,currency = "pound") %>% 
  fmt_missing(columns = everything())%>%  ##everything will take all the columns 
    cols_hide(columns = c('ticket')) %>% 
    cols_move(
    columns = c('fare'),
    after = 'embarked' 
  )   %>% 
  tab_spanner(
    label = "relatives",
    columns = c(sibsp	,parch) )%>% tab_options(row_group.as_column = TRUE) %>%  # parch are  number of parents / children aboard the Titanic
    data_color(
    columns = fare,
    colors = scales::col_numeric(
      palette = c("green", "red"),
      domain = c(7, 250)
    ))  %>%  tab_source_note(
    source_note = md(
      " sourses  and for more inforomation about gt : [youtube video](https://www.youtube.com/watch?v=aPRVzk9pvno&t=1650s) , [article](https://gt.rstudio.com/articles/case-study-gtcars.html#hiding-and-moving-some-columns) and [article2 ](https://gt.rstudio.com/articles/case-study-gtcars.html)")
  )
```
## footnote

adding a footnote is nice way to write more information about a specific column 

```{r results='markup' }
Titanic %>% 
  gt(rowname_col = 'gender' , groupname_col ='pclass'	 ) %>% 
  tab_header(
    title = md("Titanic"),
    subtitle =md(" British luxury passenger liner that sank on April 14–15, 1912")  
    
  )%>% tab_options(row_group.as_column = TRUE) %>% 
  fmt_currency(columns = fare ,currency = "pound") %>% 
  fmt_missing(columns = everything())%>%  ##everything will take all the columns 
    cols_hide(columns = c('ticket')) %>% 
    cols_move(
    columns = c('fare'),
    after = 'embarked' 
  )   %>% 
  tab_spanner(
    label = "relatives",
    columns = c(sibsp	,parch) )%>% tab_options(row_group.as_column = TRUE) %>%  # parch are  number of parents / children aboard the Titanic
    data_color(
    columns = fare,
    colors = scales::col_numeric(
      palette = c("green", "red"),
      domain = c(0, 250)
    ))  %>%  tab_source_note(
    source_note = md(
      " sourses  and for more inforomation about gt : [youtube video](https://www.youtube.com/watch?v=aPRVzk9pvno&t=1650s) , [article](https://gt.rstudio.com/articles/case-study-gtcars.html#hiding-and-moving-some-columns) and [article2 ](https://gt.rstudio.com/articles/case-study-gtcars.html)")
  ) %>% 
    tab_footnote(
    footnote = " parch are  number of parents / children aboard the Titanic.",
    locations = cells_column_labels(columns = parch) ## the gt package  cells_column_labels is a Location helper for targeting the column labels
  )

```

